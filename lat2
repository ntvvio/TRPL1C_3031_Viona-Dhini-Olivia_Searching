import 'dart:io';

// Implementasi Sequential Search
int sequentialSearch(List<int> arr, int x) {
  int N = arr.length;
  int comparisons = 0; 
  for (int i = 0; i < N; i++) {
    comparisons++; 
    if (arr[i] == x) {
      return comparisons; 
    }
  }
  return comparisons; 
}

// Implementasi Binary Search
int binarySearch(List<int> arr, int l, int r, int x) {
  int comparisons = 0; 
  while (l <= r) {
    comparisons++; 
    int m = (l + r) ~/ 2; 
    if (arr[m] == x) {
      return comparisons; 
    } else if (arr[m] > x) {
      r = m - 1; 
    } else {
      l = m + 1; 
    }
  }
  return comparisons;
}

void main() {
  List<int> arr = [2, 3, 4, 10, 66];
  stdout.write("Masukkan elemen yang ingin dicari: ");
  String? input = stdin.readLineSync();
  int x = int.tryParse(input ?? '') ?? -1;

  int seqComparisons = sequentialSearch(arr, x);
  print("Sequential Search: Perbandingan yang dibuat: $seqComparisons");

  int binComparisons = binarySearch(arr, 0, arr.length - 1, x);
  print("Binary Search: Perbandingan yang dibuat: $binComparisons");

  if (seqComparisons < binComparisons) {
    print("Sequential Search lebih efisien.");
  } else if (seqComparisons > binComparisons) {
    print("Binary Search lebih efisien.");
  } else {
    print("Kedua pencarian membuat jumlah perbandingan yang sama.");
  }
}
